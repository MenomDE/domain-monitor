package domains

import (
    whoisparser "github.com/likexian/whois-parser"
    "github.com/nwesterhausen/domain-monitor/configuration"
    "strings"
    "time"
    "fmt"

    "github.com/hako/durafmt"
)

templ DomainCard(domain configuration.Domain) {
    <div class="card w-72 bg-base-100 text-light shadow-xl">
      <div class="card-body">
        <h2 class="card-title">{ domain.Name }</h2>
        <pre>{ domain.FQDN }</pre>
        <div hx-post="/whois/" hx-trigger="load" hx-include="this">
            <input type="hidden" name="fqdn" value={ domain.FQDN } />
        </div>
        <div class="card-actions justify-end">
        <div class={ "badge", templ.KV("badge-outline", !domain.Enabled), templ.KV("badge-success", domain.Enabled) }>Periodic Updates</div>
          <div class={ "badge", templ.KV("badge-outline", !domain.Alerts), templ.KV("badge-success", domain.Alerts) }>Alerts Enabled</div>
        </div>
      </div>
    </div>
}

templ DomainCards(domains []configuration.Domain) {
    <div class="container grid lg:grid-cols-4 md:grid-cols-3 sm:grid-cols-2 gap-4 p-2">
        for _,domain := range domains {
            @DomainCard(domain)
        }
        </div>
}

templ WhoisDetail(whois configuration.WhoisCache) {
    if (whoisparser.WhoisInfo{}) == whois.WhoisInfo {
        <div class="text-center text-2xl">No WHOIS data available</div>
        return
    }

    <div class="flex flex-col">
    @WhoisDetailItem("Registrar", whois.WhoisInfo.Registrar.Name)
    @WhoisDetailItem("Name Servers", strings.Join(whois.WhoisInfo.Domain.NameServers, ", "))
    @WhoisDetailItem("Creation Date", whois.WhoisInfo.Domain.CreatedDateInTime.Format("2006-01-02"))
    @WhoisDetailItem("Expiration Date", whois.WhoisInfo.Domain.ExpirationDateInTime.Format("2006-01-02"))
    @WhoisDetailItem("Time Until Expiration", durafmt.Parse(whois.WhoisInfo.Domain.ExpirationDateInTime.Sub(time.Now())).LimitFirstN(2).String())
    @WhoisDetailItem("WHOIS Query Date", whois.LastUpdated.Format("2006-01-02"))
    </div>
}

templ WhoisDetailItem(label string, value string) {
    <div class="flex flex-col">
        <div class="text-xs text-secondary">{ label }</div>
        <div class="ps-2 text-md">{ value }</div>
    </div>
}

templ DomainListingTbody(domains []configuration.Domain) {
    <tbody>
        for _,domain := range domains {
            <tr>
                <td>{ domain.Name }</td>
                <td>{ domain.FQDN }</td>
                <td>{ fmt.Sprintf("%v", domain.Enabled) }</td>
                <td>{ fmt.Sprintf("%v", domain.Alerts) }</td>
            </tr>
        }
    </tbody>
}
